@page "/counter"
@using MatterHackers.Agg
@using MatterHackers.Agg.Font
@using MatterHackers.Agg.Image
@using MatterHackers.Agg.VertexSource
@using MatterHackers.VectorMath
@using MatterHackers.Agg.SvgTools
@using System.Diagnostics
@inject IJSRuntime JSRuntime

<pagetitle>Counter</pagetitle>

<h1>Counter</h1>

<p role="status">Current count: @currentCount @drawTimeMilliseconds</p>

<button class="btn btn-primary" @onclick="IncrementCount">Click me</button><br />
<br />
<canvas @ref="canvasRef" width="@imageWidth" height="@imageHeight"></canvas>

@code {
    private int currentCount = 0;
    private ElementReference canvasRef;
    private int imageWidth = 2;
    private int imageHeight = 2;
    private Stopwatch quickTimerTime = Stopwatch.StartNew();
    private double drawTimeMilliseconds;

    ImageBuffer imageBuffer = null;
    Graphics2D graphics2D = null;

    private async Task IncrementCount()
    {
        var start = quickTimerTime.Elapsed.TotalMilliseconds;

        var vertexStorage = new VertexStorage();
        vertexStorage.MoveTo(currentCount * 2, 40); // Start point changes with each click
        vertexStorage.Curve4(100, 100, 200, 100, 290, 40); // Control points and end point

        var flattened = new FlattenCurves(vertexStorage);
        var stroked = new Stroke(flattened, 4);

        if (imageBuffer == null)
        {
            imageBuffer = new ImageBuffer(800, 600);
            graphics2D = imageBuffer.NewGraphics2D();
        }

        graphics2D.Clear(Color.LightBlue);
        graphics2D.Render(stroked, Color.Black);
        graphics2D.DrawString($"Count: {currentCount}", new Vector2(10, 10));

        await UpdateCanvas(imageBuffer);

        currentCount++;

        drawTimeMilliseconds = quickTimerTime.Elapsed.TotalMilliseconds - start;
    }

    private async Task UpdateCanvas(ImageBuffer imageBuffer)
    {
        var pixelData = imageBuffer.GetBuffer();
        await JSRuntime.InvokeVoidAsync("updateCanvas", canvasRef, imageBuffer.Width, imageBuffer.Height, pixelData);
        imageWidth = imageBuffer.Width;
        imageHeight = imageBuffer.Height;
    }
}
